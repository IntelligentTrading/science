from utils import datetime_from_timestamp


class Evaluation:
    def __init__(self, strategy, transaction_currency, counter_currency, start_cash, start_crypto, start_time, end_time):
        self.transaction_currency = transaction_currency
        self.counter_currency = counter_currency
        self.start_cash = start_cash
        self.start_crypto = start_crypto
        self.start_time = start_time
        self.end_time = end_time
        self.strategy = strategy
        self.execute_orders(strategy.get_orders(start_cash, start_crypto))

    def execute_orders(self, orders, verbose=True):
        cash = self.start_cash
        crypto = self.start_crypto
        self.num_trades = 0

        if verbose:
            output = []
            output.append(str(self.strategy))
            output.append("\n* Order execution log *\n")
            output.append("Start balance: cash = {} {}, crypto = {} {}".format(cash, self.counter_currency, crypto, self.transaction_currency))
            output.append("Start time: {}\n--".format(datetime_from_timestamp(self.start_time)))

        for order in orders:
            assert order.transaction_currency == self.transaction_currency
            delta_crypto, delta_cash = order.execute()
            cash += delta_cash
            crypto += delta_crypto
            if verbose:
                output.append(str(order))
            self.num_trades += 1

        if self.num_trades == 0:
            print("WARNING: no orders were generated by the chosen strategy.")
            # TODO: implement latest price lookup when no orders
            self.end_price = 0
        else:
            self.end_price = orders[-1].unit_price
        self.end_cash = cash
        self.end_crypto = crypto

        if verbose:
            output.append("--")
            output.append("End time: {}".format(datetime_from_timestamp(self.end_time)))
            output.append("\nSummary")
            output.append("--")
            output.append("Number of trades: {}".format(self.num_trades))
            output.append("End cash: {0:.2f} {1}".format(cash, self.counter_currency))
            output.append("End crypto: {0:.6f} {1}".format(crypto, self.transaction_currency))
            start = self.start_cash + self.end_price*self.start_crypto
            end = self.end_cash + self.end_price*self.end_crypto
            profit = end - start
            sign = "+" if profit >= 0 else "-"
            output.append("Total value invested: {} {}".format(start, self.counter_currency))
            output.append("Total value after investment: {0:.2f} {1} ({2}{3:.2f}%)".format(end, self.counter_currency, sign, profit/start*100))
            output.append("Profit: {0:.2f} {1}".format(profit, self.counter_currency))

            f = open("log.txt", "w")
            f.write("\n".join(output))
            f.close()

            print("\n".join(output))


